import os
from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
from hydra import compose, initialize
from hydra.utils import instantiate
from omegaconf import OmegaConf

with initialize(version_base=None, config_path="config"):
    _cfg = compose(config_name="config")
    # TODO: think about overrides here
    # config = compose(config_name="config", overrides=...)
    # print(OmegaConf.to_yaml(config, resolve=True))
    #
    #
    cfg = OmegaConf.merge(_cfg, config)

remote_provider = instantiate(cfg.remote_provider)

input_manifest = cfg.input_manifest
if input_manifest.startswith("s3://"):
    input_manifest = remote_provider.remote(cfg.input_manifest)

samples_per_structure = cfg.get("samples_per_structure")
if samples_per_structure is None:
    input_to_merge = input_manifest
else:
    input_to_merge = remote_provider.remote(
        os.path.join(cfg.output_dir, "subsample.parquet")
    )


rule sample:
    input:
        input_manifest
    output:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "subsample.parquet")
        )
    run:
        import pandas as pd

        path = str(input)
        if path.endswith(".csv"):
            df = pd.read_csv(path, low_memory=False)
        else:
            df = pd.read_parquet(path)

        subsampled = pd.concat(
            [group.sample(samples_per_structure)
             for _, group in df.groupby("structure_name")]
        )
        subsampled.to_parquet(str(output))

rule merge_channels:
    input:
        input_to_merge
    output:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "merge/manifest.parquet")
        )
    shell:
        "python scripts/run_step.py step=merge ++input_manifest={input}"

rule align_and_mask:
    input:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "merge/manifest.parquet")
        )
    output:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "align/manifest.parquet")
        )
    shell:
        "python scripts/run_step.py step=align_and_mask ++input={input}"

rule register:
    input:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "align/manifest.parquet")
        )
    output:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "register/manifest.parquet")
        )
    shell:
        "python scripts/run_step.py step=register ++input={input}"

rule all:
    input:
        input_to_merge,
        remote_provider.remote(
            os.path.join(cfg.output_dir, "merge/manifest.parquet")
        ),
        remote_provider.remote(
            os.path.join(cfg.output_dir, "align/manifest.parquet")
        ),
        remote_provider.remote(
            os.path.join(cfg.output_dir, "register/manifest.parquet")
        )
    output:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "processed/manifest.parquet")
        )
    shell:
        "python scripts/run_step.py step=combine_dfs ++step.input.0={input[0]}"

rule cytodata_preprocess:
    input:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "processed/manifest.parquet")
        )
    output:
        remote_provider.remote(
            os.path.join(cfg.output_dir, "processed/hackathon_manifest_09292022.parquet")
        )
    shell:
        "python scripts/cytodata_preprocessing_script.py {input} {output}"

rule delete_temps:
    shell:
        """
        wget https://dl.min.io/client/mc/release/linux-amd64/mc && \
        chmod +x ./mc && \
        ./mc alias set local http://minio.a100.int.allencell.org:9002 && \
        ./mc rm  --force --recursive local/variance-dataset/merge --force --recursive && \
        ./mc rm  --force --recursive local/variance-dataset/align --force --recursive && \
        ./mc rm  --force --recursive local/variance-dataset/register --force --recursive && \
        rm ./mc
        """
